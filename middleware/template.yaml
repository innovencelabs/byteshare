AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  LamdbaLayerName:
    Type: String
    Default: byteshare-dependencies
  R2AccountID:
    Type: String
  R2AccessKey:
    Type: String
  R2SecretKey:
    Type: String
  CorsOrigin:
    Type: String
  ResendAPIKey:
    Type: String
  AppwriteURL:
    Type: String
  AppwriteProjectID:
    Type: String
  AWSDefaultRegion:
    Type: String
  RabbitMQQueue:
    Type: String
  RabbitMQURL:
    Type: String
  Environment:
    Type: String
  AppwriteWebhookUser:
    Type: String
  AppwriteWebhookPass:
    Type: String
  ScanUser:
    Type: String
  ScanPass:
    Type: String
  AWSApiKey:
    Type: String
  AWSApiAccessRoleArn:
    Type: String
  AWSApiAccessKeyId:
    Type: String
  AWSApiAccessSecretAccessKey:
    Type: String
  AWSApiAccessRegion:
    Type: String
  AppwriteApiKey:
    Type: String
Globals:
  Function:
    Timeout: 900
  Api:
    Cors:
      AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,File-Length,X-Auth-Token'"
      AllowOrigin: "'*'"
Resources:
  ByteShareFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: byteshare-api
      MemorySize: 2048
      Handler: main.handler
      Runtime: python3.10
      CodeUri: ./app
      Layers:
        - Ref: SitePackagesLayer
      Tracing: Active
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSXrayWriteOnlyAccess
        - AmazonAPIGatewayAdministrator
        - AmazonDynamoDBFullAccess
      Environment:
        Variables:
          R2_ACCOUNT_ID: !Ref R2AccountID
          R2_ACCESS_KEY: !Ref R2AccessKey
          R2_SECRET_KEY: !Ref R2SecretKey
          WEB_BASE_URL: !Ref CorsOrigin
          RESEND_API_KEY: !Ref ResendAPIKey
          APPWRITE_URL: !Ref AppwriteURL
          APPWRITE_PROJECT_ID: !Ref AppwriteProjectID
          AWS_APP_REGION: !Ref AWSDefaultRegion
          RABBITMQ_QUEUE: !Ref RabbitMQQueue
          RABBITMQ_URL: !Ref RabbitMQURL
          ENVIRONMENT: !Ref Environment
          APPWRITE_WEBHOOK_USER: !Ref AppwriteWebhookUser
          APPWRITE_WEBHOOK_PASS: !Ref AppwriteWebhookPass
          SCAN_USER: !Ref ScanUser
          SCAN_PASS: !Ref ScanPass
          AWS_API_ACCESS_ACCESS_KEY: !Ref AWSApiAccessKeyId
          AWS_API_ACCESS_SECRET_ACCESS_KEY: !Ref AWSApiAccessSecretAccessKey
          AWS_API_ACCESS_REGION: !Ref AWSApiAccessRegion
          AWS_API_ACCESS_ROLE_ARN: !Ref AWSApiAccessRoleArn
          AWS_API_KEY: !Ref AWSApiKey
          APPWRITE_API_KEY: !Ref AppwriteApiKey
      Events:
        HealthCheckApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: ByteShareAPIGW
            Path: /health
            Method: any
            Auth:
              ApiKeyRequired: true
        UploadApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: ByteShareAPIGW
            Path: /upload/{proxy+}
            Method: any
            Auth:
              ApiKeyRequired: true
        DownloadApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: ByteShareAPIGW
            Path: /download/{proxy+}
            Method: any
            Auth:
              ApiKeyRequired: true
        FeedbackApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: ByteShareAPIGW
            Path: /feedback
            Method: any
            Auth:
              ApiKeyRequired: true
        SubscribeApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: ByteShareAPIGW
            Path: /subscribe
            Method: any
            Auth:
              ApiKeyRequired: true
        SecuredApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: ByteShareAPIGW
            Path: /secured/{proxy+}
            Method: any
            Auth:
              Authorizer: AWS_IAM
              ApiKeyRequired: true
        WebhookApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: ByteShareAPIGW
            Path: /webhook/{proxy+}
            Method: any
        AccessApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: ByteShareAPIGW
            Path: /access/{proxy+}
            Method: any
            Auth:
              ApiKeyRequired: true
  ByteShareAPIGW:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      OpenApiVersion: "3.0.0"
      TracingEnabled: true
      Cors:
        AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,x-api-key,X-Amz-Security-Token,File-Length,X-Auth-Token'"
        AllowOrigin: !Sub
          - "'${CorsOrigin}'"
          - CorsOrigin: !Ref CorsOrigin
  SitePackagesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName:
        Ref: LamdbaLayerName
      Description: python site packages for byteshare app
      ContentUri: ./python-site-packages.zip
      CompatibleRuntimes:
        - python3.10
      LicenseInfo: "MIT"
      RetentionPolicy: Retain
  ByteShareUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref ByteShareAPIGW
          Stage: prod
  ByteShareDevUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref ByteShareAPIGW
          Stage: prod
      Quota:
        Limit: 20
        Offset: 0
        Period: DAY
      Throttle:
        BurstLimit: 5
        RateLimit: 10
  ByteShareApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: ByteShareAPIKey
      Enabled: true
  MyUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ByteShareApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ByteShareUsagePlan
Outputs:
  ByteShareAPIRes:
    Description: "API Gateway endpoint URL for prod stage of byteshare function"
    Value: !Sub "https://${ByteShareAPIGW}.execute-api.${AWS::Region}.amazonaws.com/prod/"